<header class="header">
  <h1>Approach</h1>
</header>
<article class="main">
  <h1>Overview</h1>
  <div class="article-content">
    <p>Easy-maintainable, simple code that accomplishes initial goal of building product is everyone’s wish.</p>
    <p>But real life demonstrates that designs are often done in chunks with weeks gap between ones without solid app vision, fixes fit ok at the very end of huge CSS file with MOAR selector weight, adding new rule is more effective that investigatng into existing, coding element in way it will work just here and that’s it, short-hand class names are understandable enough and its not essentially that guy from other team should share your practices and approaches or at least be aware of them.</p>
    <p>
      So our approach starts from getting away from
      <ul>
        <li>writing code without having approach stated</li>
        <li>just continue adding elements without paying attention could they be merged with existing ones</li>
        <li>creating location-dependent elements</li>
        <li>using hardly understandable shortcuts in elements’ class names</li>
        <li>writing hardly maintainable fixes.</li>
      </ul>
    </p>
    <p>
      And we are going to accomplish that by:
    </p>
      <ul>
        <li>define approach, share and follow it</li>
        <li>assembling all elements (objects, modules etc.) into UI library with design process involved</li>
        <li>creating completely location-independent elements</li>
        <li>use simple, semantic and human class names</li>
        <li>avoid to use hacks.</li>
      </ul>
    <h3>Independency</h3>
    <p>Current web apps fashion is about building interfaces from independent elements. ApplePie approach stands for flexibility in re-using anything that was already created. That seems obvious when its a button but somehow its missed when element is composite. Main idea is to think about elements as building blocks from semantic and logical perspective and then code composite elements independently. “Independently” means that each element has its own world with own rules and does not know about other elements’ worlds and rules. Elements should be as small and independent as logic allows.</p>
    <p>In chasing code beauty and conciseness its always a temptation to take out all rules that are repeated. But doing so, its important to keep elements’ independency in mind. Stop and think well every time when “taking out” of common rule could hurt independency.</p>
    <h3>Naming</h3>
    <p>Obviously, element’s name should be a clear mirror of its independent nature. So no more <code class="inline language-scss">.button-for-header</code> excuses.</p>
    <p>Other aspect is semantic. Name it from functionality not position or appearance. Name it from its purpose and benefit but not from look. So that elements are named with honest and functional names.</p>
    <p>And, finally, keep them as simple as possible. In our vision, this "possible" ends when simplicity hurts readability: <code class="inline language-scss">.button</code> is named as <code class="inline language-scss">.btn</code></p>
    <p>Following these three intentions will make code healthy.</p>
  </div> <!-- /article-content -->
</article>

