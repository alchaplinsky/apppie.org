---
title: CSS naming conventions. Standard class names for components of web interface.
description: Naming conventions for classes. ApplePie presents a simple approach to CSS class naming.
keywords: css, sass, naming, conventions, elements, classes.
---
<header class="header">
  <h1>Approach</h1>
</header>
<article class="main">
  <h1>Naming Convention</h1>
  <div class="article-content">
    <p><em>Naming is one of the most fundamental and important part of developer activities. Naming conventions help us
    a lot making our code more readable, predictable. And when it comes to code modification and debugging, conventons
    help us to easily find needed part of code. They also give us understanding where to put stuff, so it is extremly
    important to stick to conventions espesially while working in a team.</em></p>

    <div class="note mbl">
      Consider using <a href="http://alchapone.github.io/css-class-name-generator/" targer='_blank'>CSS Class Name Generator</a>
      , it might be helpful if you're looking for a cool class name for you components.
    </div>

    <h2 class="ptm">Naming selectors</h2>
    <div class="mbl">
      <p>Avoid presentation or location specific words in the name, like <code>blue</code>, <code>text-gray</code>,
        or <code>side-block</code>.
        What happens when you decide to change the color? The class <code>blue</code> is actually red?</p>
      <p>Do not use class names that describe content of an element. One day you can come up with a class name like
      <code>.products-list</code> and another day you notice that product list styling is well suited for listing tweets.
      So what would you do? Re-implement <code>.products-list</code> to with same styles but call it <code>.tweets-list</code>
      or just let tweets live inside <code>.products-list</code>? It is better to give it abstract name like
      <code>.entries</code> from the beginning.</p>
      <p>Names should be lowercase, using a dash <code>-</code> as a separator in a multi-word class names.
        It's clear, readable and distinguish CSS from underscore case and camel case naming.</p>
      <p>Use full descriptive words. Abbreviating a word may save you a few milliseconds to type initially,
        but may make your code harder to read, costing you more time down the road. Being consistent in this
        will save you the time spent thinking how exactly you abbreviated a word couple of months ago.</p>
      <p>Use <strong>nouns</strong> for naming objects and modules.</p>
      <p>When it comes to naming modifiers and states, use <strong>adjectives</strong> as they are describing type or state
        of an object.</p>
    </div>

    <h2>Natural language</h2>
    <div class="mbl">
      <p>Literally every element in nowadays web interfaces already have it's own name (or even several names). We as web
      developers are using them in every day life talking to other developers and designers. So why should we make up some
      fancy class names with prefixes or suffixes, abbreviate words or concatenate several words to make selector more unique?</p>
      <p>Just use <strong>natural language</strong> for naming classes. These words are mostly unique already, and they make your code a lot more
      readable and understandable. Using this names as CSS selector gives us most descriptive and understandable language
      to build web pages and communicate with other developers.</p>
    </div>

    <h2 class="mbs">Reference to Frequently used classes</h2>
    <p>Since we are using same terminology in web development, it would be not hard to come up with general conventions
    on naming web components. May be even start using standard class names for standard elements. This table below (is being
    constantly changing and extending) may be used as a convention on how to call elements or at least as reference when
    looking for a nice class name.</p>
    <div class="mbm">
      <table>
        <thead>
          <tr>
            <th width="150">Selector</th>
            <th>Component</th>
            <th>Comment</th>
          </tr>
        </thead>
        <tbody>
          <tr class="divider"><td colspan="3">Layout classes</td></tr>
          <tr>
            <td><code>.wrapper</code></td>
            <td>Wrapper element</td>
            <td>Most often used for sticky footer</td>
          </tr>
          <tr>
            <td><code>.container</code></td>
            <td>Wrapper that sets width and centers content</td>
            <td>aka <code>{ width: 960px; margin: 0 auto }</code></td>
          </tr>
        </tr>
          <tr>
            <td><code>header.header</code></td>
            <td>Page header</td>
            <td></td>
          </tr>
          <tr>
            <td><code>section.body</code></td>
            <td>Page body</td>
            <td></td>
          </tr>
          <tr>
            <td><code>footer.footer</code></td>
            <td>Page footer</td>
            <td></td>
          </tr>
          <tr>
            <td><code>aside.sidebar</code></td>
            <td>Page Sidebar</td>
            <td></td>
          </tr>
          <tr>
            <td><code>section.content</code></td>
            <td>Page main content</td>
            <td>Used along with sidebar</td>
          </tr>
          <tr class="divider"><td colspan="3">Components</td></tr>
          <tr>
            <td><code>.navigation</code></td>
            <td>Navigation element</td>
            <td></td>
          </tr>
          <tr>
            <td><code>.pagination</code></td>
            <td>Pagination</td>
            <td></td>
          </tr>
          <tr>
            <td><code>.tabs > .tab</code></td>
            <td>Tabs navigation</td>
            <td>Parent element uses plural 'tabs' and each tab is named singular</td>
          </tr>
          <tr>
            <td><code>.breadcrumbs</code></td>
            <td>Breadcrumbs</td>
            <td></td>
          </tr>
          <tr>
            <td><code>.dropdown</code></td>
            <td>Context menu</td>
            <td>Used to organize list of links that is hidden by default</td>
          </tr>
          <tr>
            <td><code>.article</code></td>
            <td>Entry item</td>
            <td>Used for different kinds of entries</td>
          </tr>
          <tr>
            <td><code>.thumbnail</code></td>
            <td>Image thumbnails</td>
            <td></td>
          </tr>
          <tr>
            <td><code>.media</code></td>
            <td>Media object</td>
            <td>Abstract object styles for building various types of entries (like blogposts, comments, etc) that feature a left- or right-aligned image alongside textual content.</td>
          </tr>
          <tr>
            <td><code>.panel</code></td>
            <td>Panel block</td>
            <td>Used if you need to put some content in a box</td>
          </tr>
          <tr>
            <td><code>.tooltip</code></td>
            <td>Tooltips</td>
            <td></td>
          </tr>
          <tr>
            <td><code>.popup</code></td>
            <td>Popups</td>
            <td></td>
          </tr>
          <tr>
            <td><code>.flash</code></td>
            <td>Flash messages</td>
            <td></td>
          </tr>
          <tr>
            <td><code>.label</code></td>
            <td>Labels</td>
            <td></td>
          </tr>
          <tr>
            <td><code>.button</code></td>
            <td>Buttons</td>
            <td></td>
          </tr>
        </tbody>
      </table>

    </div>
  </div>
</article>
