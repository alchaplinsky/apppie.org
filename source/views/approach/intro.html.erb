<header class="header">
  <h1>Approach</h1>
</header>
<article class="main">
  <h1>Main Principles</h1>
  <div class="article-content">
    <p>How do you scale your frontend for thousands of pages? How do you name your selectors and organize CSS? ApplePie gives you and approach to build your frontend faster, keep code maintainable, easy to reand and standard-based. It brings reasonability predictability to CSS and HTML it is a lot easier to build great web applications.</p>
    <p>ApplePie consist of two core things. First is basic idea and a set of conventions build on top of this idea. And second is a minimalistic <a href="https://github.com/alchapone/applepie" target="_blank">CSS framework</a>, that practically describes how those ideas can be implemented in real life and gives web developers a tool to build interfaces.</p>

    <h2>ApplePie Main Principles</h2>
    <h3>Modularity</h3>
    <p>Most modern methodologies like <a href="">OOCSS</a>, BEM, SMACSS are all about learning to think about your UI and CSS in terms of objects. You might have heard diffrent terms - block, object, module. But they all about pretty much the same approach - having modular CSS and independent UI elements. And it appears to be really useful and flexible approach.</p>
    <p>Before getting to actual code writing look through all designs and think about interface you see in terms of elements. You will definitely see several heading styles repeated through all screens, alike button styles with minor differences in colors or sizes and uniform inputs, textareas etc. Start extractig these simple elements and implement them independently, so it doesn't matter where you place them, they would look the same.</p>
    <div class="note">
      The only dependency for all elements it typography. You wouldn't like to hardcode font falimlies or font sizes into each element.
    </div>
    <h3>Keep it simple as you possibly can!</h3>
    <h3>Humanreadable Naming</h3>
    <p></p>
  </div> <!-- /article-content -->
</article>

